parameters:
  repo_address: $(IOTHUB-E2E-REPO-ADDRESS)
  repo_user: $(IOTHUB-E2E-REPO-USER)
  repo_password: $(IOTHUB-E2E-REPO-PASSWORD)
  log_folder_name: ''
  language: ''

steps:
- powershell: $(Horton.FrameworkRoot)/scripts/remove-edgehub-device.ps1
  workingDirectory: $(Horton.FrameworkRoot)
  displayName: 'POWERSHELL: remove devices'
  env:
    IOTHUB_E2E_CONNECTION_STRING: $(IOTHUB-E2E-CONNECTION-STRING)
    IOTHUB_E2E_REPO_ADDRESS: $(IOTHUB-E2E-REPO-ADDRESS)
    IOTHUB_E2E_REPO_USER: $(IOTHUB-E2E-REPO-USER)
    IOTHUB_E2E_REPO_PASSWORD: $(IOTHUB-E2E-REPO-PASSWORD)
    IOTEDGE_DEBUG_LOG: $(IOTEDGE_DEBUG_LOG)
  condition: and(always(), ne(variables['skipTest'],'yes'))

- powershell: $(Horton.FrameworkRoot)/scripts/fetch-logs-pwsh.ps1 ${{ parameters.language }} $(Build.SourcesDirectory) ${{ parameters.log_folder_name }}
    #$(Horton.FrameworkRoot)/scripts/fetch-logs-pwsh.ps1 ${{ parameters.language }} $(Build.SourcesDirectory)/TEST-${{ parameters.log_folder_name }}.xml $(Build.SourcesDirectory)
    #try {
    #  New-Item -Path $(Build.SourcesDirectory)/results/${{ parameters.log_folder_name }} -ItemType Directory
    #}
    #finally {
      #try {
      #  New-Item $(Build.SourcesDirectory)/results/${{ parameters.log_folder_name }} -ItemType Directory
      #}
      #finally {
    #  $files = Get-ChildItem "$(Horton.FrameworkRoot)/results/logs"
    #  Move-Item $files  $(Build.SourcesDirectory)/results/${{ parameters.log_folder_name }}
      #}

    #}
    #try {
    #  New-Item $(Build.SourcesDirectory)/results -ItemType Directory
    #}
    #finally {
    #  $files = Get-ChildItem "$(Build.SourcesDirectory)/TEST-*"
    #  Move-Item $files $(Build.SourcesDirectory)/results/
    #}
  displayName: 'POWERSHELL: Fetch logs'
  condition: and(always(), ne(variables['skipTest'],'yes'))

- task: PublishTestResults@2
  displayName: 'Publish Test Results **/TEST-*.xml'
  condition: and(always(), ne(variables['skipTest'],'yes'))

- task: CopyFiles@2
  displayName: 'Copy result files to artifact staging'
  inputs:
    cleanTargetFolder: true # Optional
    SourceFolder: '$(Build.SourcesDirectory)/results'
    contents: '**/!(*.pyc)'
    targetFolder: $(Build.ArtifactStagingDirectory)
#  inputs:
#    SourceFolder: '$(Build.SourcesDirectory)/results'
#    TargetFolder: '$(Build.ArtifactStagingDirectory)'
#  condition: and(always(), ne(variables['skipTest'],'yes'))

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'Result for $(Build.DefinitionName) $(Build.BuildId)'
  condition: and(always(), ne(variables['skipTest'],'yes'))


